{
  "openapi": "3.0.1",
  "info": {
    "title": "Anybill Vendor API 1.0",
    "description": "Api for the Anybill service for vendors.",
    "contact": {
      "name": "Patrick GÃ¶ttler",
      "url": "https://anybill.de/",
      "email": "patrick.goettler@anybill.de"
    },
    "version": "1.0"
  },
  "paths": {
    "/api/v1/bill": {
      "post": {
        "tags": [
          "Bill"
        ],
        "summary": "Adds a receipt for the given user to the System.",
        "requestBody": {
          "description": "A dto containing the users Id, the bill should be added to, and the receipt with its line items.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AddBillForStoreDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddBillForStoreDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddBillForStoreDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddBillForStoreDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Returns on success."
          },
          "400": {
            "description": "Returns if the data is invalid or an error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Returns if the user could not be authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Returns if the access token is missing the right scope or user permissions are missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Returns if the user or store was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returns if an unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/category": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Lists all categories.",
        "responses": {
          "200": {
            "description": "Returns on success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryDto"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Returns if no categories were found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Returns if the user could not be authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Returns if the access token is missing the right scope or user permissions are missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returns if an unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/category/{id}": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Gets the category with the given id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the category.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns on success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryDto"
                }
              }
            }
          },
          "401": {
            "description": "Returns if the user could not be authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Returns if the access token is missing the right scope or user permissions are missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Returns if the category was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returns if an unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/store": {
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "Lists all stores.",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Elements to skip for pagination.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "How much elements to take for pagination.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns on success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StoreDto"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Returns if no stores could be found."
          },
          "401": {
            "description": "Returns if the user could not be authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Returns if the access token is missing the right scope or user permissions are missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returns if an unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Store"
        ],
        "summary": "Creates or updates the store. The valid from datetime will be set to the current timestamp if null or in the past.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertStoreDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertStoreDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertStoreDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertStoreDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns if the store was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreDto"
                }
              }
            }
          },
          "201": {
            "description": "Returns if the store was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreDto"
                }
              }
            }
          },
          "400": {
            "description": "Returns if model validation, add or update failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Returns if the user could not be authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Returns if the access token is missing the right scope or user permissions are missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returns if an unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/store/{id}": {
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "Gets the store with the given id.",
        "operationId": "GetStore",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the store.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns on success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreDto"
                }
              }
            }
          },
          "401": {
            "description": "Returns if the user could not be authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Returns if the access token is missing the right scope or user permissions are missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Returns if the store was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returns if an unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Store"
        ],
        "summary": "Deletes the store with the given id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the store.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "upUntilValidFrom",
            "in": "query",
            "description": "The datetime up until the store history should be deleted.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Returns on success."
          },
          "400": {
            "description": "Returns if the store could not be deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Returns if the user could not be authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Returns if the access token is missing the right scope or user permissions are missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Returns if the store could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returns if an unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/store/{id}/history": {
      "get": {
        "tags": [
          "Store"
        ],
        "summary": "Gets the history of the store with the given id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the store.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns on success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StoreHistoryDto"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Returns if no data was found."
          },
          "401": {
            "description": "Returns if the user could not be authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Returns if the access token is missing the right scope or user permissions are missing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Returns if an unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "PriceModifierDto": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Price modifier applied to line item.",
        "format": "int32"
      },
      "ReturnDto": {
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "format": "date-time"
          },
          "Quantity": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LineItemDto": {
        "required": [
          "Name",
          "PricePaid",
          "Quantity",
          "SequenceNumber",
          "Vat"
        ],
        "type": "object",
        "properties": {
          "Quantity": {
            "type": "integer",
            "description": "The quantity of the line item.",
            "format": "int32"
          },
          "PricePaid": {
            "type": "number",
            "description": "The actual price that was paid for this line item per item.",
            "format": "double"
          },
          "OriginalPrice": {
            "type": "number",
            "description": "The original price before discounts that would have been called per item.",
            "format": "double",
            "nullable": true
          },
          "Vat": {
            "type": "integer",
            "description": "The percentage of vat. e.g. 19",
            "format": "int32"
          },
          "Text": {
            "maxLength": 256,
            "type": "string",
            "description": "Additional text that should be displayed with the line item.",
            "nullable": true
          },
          "SequenceNumber": {
            "type": "integer",
            "description": "The sequence number of the line items. Needed to display the correct order.",
            "format": "int32"
          },
          "PriceModifier": {
            "$ref": "#/components/schemas/PriceModifierDto"
          },
          "Name": {
            "maxLength": 256,
            "type": "string",
            "description": "Name of the article.",
            "nullable": true
          },
          "Description": {
            "maxLength": 1024,
            "type": "string",
            "description": "Description of the article.",
            "nullable": true
          },
          "Ean": {
            "maxLength": 128,
            "type": "string",
            "description": "Ean of the article.",
            "nullable": true
          },
          "CategoryId": {
            "type": "string",
            "description": "The id of the category the article belongs to.",
            "format": "uuid"
          },
          "Returns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReturnDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents one line of a bill."
      },
      "TenderDto": {
        "required": [
          "Amount",
          "CurrencyCode",
          "TenderTypeId"
        ],
        "type": "object",
        "properties": {
          "TenderTypeId": {
            "maxLength": 50,
            "type": "string",
            "description": "Tender type id.",
            "nullable": true
          },
          "CurrencyCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "Currency code as of ISO 4217.",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "The amount paid with this tender.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "BillDto": {
        "required": [
          "BeginDateTime",
          "Date",
          "EndDateTime",
          "LineItems",
          "Tenders",
          "TotalAmountPaid",
          "TotalTaxPaid",
          "TransactionId"
        ],
        "type": "object",
        "properties": {
          "TransactionId": {
            "maxLength": 512,
            "type": "string",
            "description": "Identifier for this transaction in the vendors system. Usually represented in form of a barcode on the receipt.",
            "nullable": true
          },
          "Date": {
            "type": "string",
            "description": "Date and time of the transaction. This is to be set by the vendor to represent the correct time of the transaction.",
            "format": "date-time"
          },
          "CustomText": {
            "maxLength": 2048,
            "type": "string",
            "description": "Custom text the vendor might want to add to his receipts.",
            "nullable": true
          },
          "LineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineItemDto"
            },
            "description": "A collection of the invoice line items of this transaction.",
            "nullable": true
          },
          "Categories": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A collection of categories. Can be assigned by the vendor.",
            "nullable": true
          },
          "BeginDateTime": {
            "type": "string",
            "description": "The date time of the start of the transaction.",
            "format": "date-time"
          },
          "EndDateTime": {
            "type": "string",
            "description": "The date time of the end of the transaction.",
            "format": "date-time"
          },
          "Tenders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TenderDto"
            },
            "description": "Tender data.",
            "nullable": true
          },
          "TotalAmountPaid": {
            "type": "number",
            "description": "Total amount paid.",
            "format": "double"
          },
          "TotalTaxPaid": {
            "type": "number",
            "description": "Total tax paid.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "AddBillForStoreDto": {
        "required": [
          "Bill",
          "StoreId",
          "UserId"
        ],
        "type": "object",
        "properties": {
          "UserId": {
            "type": "string",
            "description": "The id of the user that the bill belongs to.",
            "format": "uuid"
          },
          "StoreId": {
            "type": "string",
            "description": "The id of the store of the vendor in which the transaction was done.",
            "nullable": true
          },
          "Bill": {
            "$ref": "#/components/schemas/BillDto"
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "CategoryDto": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddressDto": {
        "required": [
          "City",
          "Country",
          "Number",
          "Street",
          "Zip"
        ],
        "type": "object",
        "properties": {
          "Country": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "Zip": {
            "maxLength": 12,
            "type": "string",
            "nullable": true
          },
          "City": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "Street": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "Number": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StoreDto": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "ShortName": {
            "type": "string",
            "nullable": true
          },
          "LongName": {
            "type": "string",
            "nullable": true
          },
          "Address": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "VatId": {
            "type": "string",
            "nullable": true
          },
          "ValidFrom": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "UpsertStoreDto": {
        "required": [
          "Address",
          "Id"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "maxLength": 10,
            "type": "string",
            "nullable": true
          },
          "ShortName": {
            "maxLength": 64,
            "type": "string",
            "nullable": true
          },
          "LongName": {
            "maxLength": 128,
            "type": "string",
            "nullable": true
          },
          "Address": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "VatId": {
            "maxLength": 24,
            "type": "string",
            "nullable": true
          },
          "ValidFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StoreHistoryDto": {
        "type": "object",
        "properties": {
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "Id": {
            "type": "string",
            "nullable": true
          },
          "ShortName": {
            "type": "string",
            "nullable": true
          },
          "LongName": {
            "type": "string",
            "nullable": true
          },
          "Address": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "VatId": {
            "type": "string",
            "nullable": true
          },
          "ValidFrom": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. \\r\\n\\r\\n \r\n                      Enter 'Bearer' [space] and then your token in the text input below.\r\n                                  \\r\\n\\r\\nExample: 'Bearer {token}'",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}